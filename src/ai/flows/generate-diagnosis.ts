// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI flow for generating a diagnosis from a medical image.
 *
 * - generateDiagnosis - A function that handles the diagnosis generation process.
 * - GenerateDiagnosisInput - The input type for the generateDiagnosis function.
 * - GenerateDiagnosisOutput - The return type for the generateDiagnosis function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateDiagnosisInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "A medical image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type GenerateDiagnosisInput = z.infer<typeof GenerateDiagnosisInputSchema>;

const GenerateDiagnosisOutputSchema = z.object({
  diagnosis: z.string().describe('The AI-generated diagnosis of the medical image.'),
  confidence: z.number().describe('The confidence level of the diagnosis (0-1).'),
});
export type GenerateDiagnosisOutput = z.infer<typeof GenerateDiagnosisOutputSchema>;

export async function generateDiagnosis(input: GenerateDiagnosisInput): Promise<GenerateDiagnosisOutput> {
  return generateDiagnosisFlow(input);
}

const generateDiagnosisPrompt = ai.definePrompt({
  name: 'generateDiagnosisPrompt',
  input: {schema: GenerateDiagnosisInputSchema},
  output: {schema: GenerateDiagnosisOutputSchema},
  prompt: `You are an AI assistant specialized in analyzing medical images and providing diagnosis.

  Analyze the following medical image and provide a diagnosis. Also, provide a confidence level (0-1) for your diagnosis.

  Image: {{media url=imageDataUri}}
  \n`,
});

const generateDiagnosisFlow = ai.defineFlow(
  {
    name: 'generateDiagnosisFlow',
    inputSchema: GenerateDiagnosisInputSchema,
    outputSchema: GenerateDiagnosisOutputSchema,
  },
  async input => {
    const {output} = await generateDiagnosisPrompt(input);
    return output!;
  }
);
