// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Determines the certainty score of a given diagnosis.
 *
 * - determineCertaintyScore - A function that determines the certainty score of a diagnosis.
 * - DetermineCertaintyScoreInput - The input type for the determineCertaintyScore function.
 * - DetermineCertaintyScoreOutput - The return type for the determineCertaintyScore function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetermineCertaintyScoreInputSchema = z.object({
  diagnosis: z.string().describe('The diagnosis generated by the AI.'),
  findings: z.string().describe('Possible findings related to the diagnosis.'),
});
export type DetermineCertaintyScoreInput = z.infer<
  typeof DetermineCertaintyScoreInputSchema
>;

const DetermineCertaintyScoreOutputSchema = z.object({
  certaintyScore: z
    .number()
    .describe(
      'A numerical score between 0 and 1 (inclusive) representing the AI models certainty in the diagnosis, where 0 is least certain and 1 is most certain.'
    ),
  reasoning: z
    .string()
    .describe(
      'Explanation of why the AI model assigned the certainty score, including factors considered.'
    ),
});
export type DetermineCertaintyScoreOutput = z.infer<
  typeof DetermineCertaintyScoreOutputSchema
>;

export async function determineCertaintyScore(
  input: DetermineCertaintyScoreInput
): Promise<DetermineCertaintyScoreOutput> {
  return determineCertaintyScoreFlow(input);
}

const prompt = ai.definePrompt({
  name: 'determineCertaintyScorePrompt',
  input: {schema: DetermineCertaintyScoreInputSchema},
  output: {schema: DetermineCertaintyScoreOutputSchema},
  prompt: `You are an AI assistant that assesses the certainty of medical diagnoses.

  Based on the provided diagnosis and findings, determine a certainty score (0 to 1) and explain your reasoning.

  Diagnosis: {{{diagnosis}}}
  Findings: {{{findings}}}

  Consider factors like the clarity of findings, the specificity of the diagnosis, and any ambiguities present.

  Provide the certainty score and reasoning in the output. The certainty score MUST be a number between 0 and 1.`,
});

const determineCertaintyScoreFlow = ai.defineFlow(
  {
    name: 'determineCertaintyScoreFlow',
    inputSchema: DetermineCertaintyScoreInputSchema,
    outputSchema: DetermineCertaintyScoreOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
